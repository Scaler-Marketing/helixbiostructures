{"mappings":"A,C,K,S,E,C,C,C,C,C,C,C,E,O,c,C,E,E,C,I,E,I,E,W,C,E,a,C,C,E,C,I,E,W,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,I,E,E,Q,C,E,Q,S,C,C,C,E,E,E,O,C,gB,I,GCAO,SAAS,EAAc,CAAS,CAAE,CAAa,EACpD,GAAI,CAAC,EAAW,CACd,QAAQ,KAAK,CAAC,uBACd,MACF,CAGA,IAAM,EAAiB,EAAU,WAAW,CACtC,EAAkB,EAAU,YAAY,CAGxC,EAAa,SAAS,EAAiB,GAGvC,EAAmB,KAAK,IAAI,CAAC,EAAkB,GAG/C,EAAS,QAAU,KAAK,MAAM,GAAG,QAAQ,CAAC,IAAI,MAAM,CAAC,EAAG,GAG1D,EAAa,CAAC;kCACc,EAAE,EAAe,CAAC,EAAE,EAAgB;;kCAEpC,EAAE,EAAO;4BACf,EAAE,MAAM,IAAI,CAAC,CAAE,OAAQ,CAAiB,GACrC,GAAG,CAAC,CAAC,EAAG,IACP,MAAM,IAAI,CAAC,CAAE,OAAQ,CAAc,GAChC,GAAG,CAAC,CAAC,EAAG,IAGA,CAAC,SAAS,EAFP,EAAM,EAEK,KAAK,EADhB,EAAM,EACc,SAAS,EAAE,EAAa,EAAE,UAAU,EAAE,EAAa,EAAE,GAAG,CAAC,EAExF,IAAI,CAAC,KAET,IAAI,CAAC,IAAI;;;sBAGlB,CAAC,CAGf,EAAgB,SAAS,aAAa,CAAC,OAgB7C,OAfA,EAAc,SAAS,CAAG,iBAC1B,EAAc,KAAK,CAAC,SAAS,CAAG,CAAC,KAAK,EAAE,EAAO,CAAC,CAAC,CASjD,EAAc,SAAS,CAAG,EAC1B,EAAU,UAAU,CAAC,YAAY,CAAC,EAAe,GAEjD,EAAc,WAAW,CAAC,GAEnB,EAAc,aAAa,CAAC,MACrC,C,G,E,Q,S,C,C,C,E,E,E,O,C,kB,I,GCzDO,SAAS,EAAgB,CAAK,CAAE,CAAQ,EAE7C,EA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","sources":["<anon>","src/modules/createSVGGrid.js","src/modules/setLinesWrapper.js","src/modules/getHeight.js","src/globals.js","src/modules/staggerHeading.js","src/modules/staggerText.js","src/modules/buttonStates.js","src/modules/playVideoOnScroll.js","src/modules/menus.js","src/modules/setImageMasks.js","src/modules/staggerElements.js"],"sourcesContent":["(() => {\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire5744\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire5744\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"cljH0\", function(module, exports) {\n\n$parcel$export(module.exports, \"createSVGGrid\", () => $8fc6b8bbd146cdca$export$d47c320381fa2abf);\nfunction $8fc6b8bbd146cdca$export$d47c320381fa2abf(container, squaresPerRow) {\n    if (!container) {\n        console.error(\"Container not found\");\n        return;\n    }\n    // Get the container's dimensions\n    const containerWidth = container.clientWidth;\n    const containerHeight = container.clientHeight;\n    // Calculate the size of each square\n    const squareSize = parseInt(containerWidth / squaresPerRow);\n    // Calculate the number of squares per column\n    const squaresPerColumn = Math.ceil(containerHeight / squareSize);\n    // Create a unique ID for the mask\n    const maskId = \"mask-\" + Math.random().toString(36).substr(2, 9);\n    // Create SVG content\n    let svgContent = `\n                <svg viewBox=\"0 0 ${containerWidth} ${containerHeight}\" xmlns=\"http://www.w3.org/2000/svg\" preserveAspectRatio=\"none\" style=\"position:absolute;top:0;left:0;width:100%;height:100%;pointer-events:none;\">\n                    <defs>\n                        <mask id=\"${maskId}\">\n                            ${Array.from({\n        length: squaresPerColumn\n    }).map((_, row)=>Array.from({\n            length: squaresPerRow\n        }).map((_, col)=>{\n            const x = col * squareSize;\n            const y = row * squareSize;\n            return `<rect x=\"${x}\" y=\"${y}\" width=\"${squareSize + 1}\" height=\"${squareSize + 1}\"/>`;\n        }).join(\"\")).join(\"\")}\n                        </mask>\n                    </defs>\n                </svg>`;\n    // Create wrapper for the SVG and mask\n    const maskContainer = document.createElement(\"div\");\n    maskContainer.className = \"mask-container\";\n    maskContainer.style.maskImage = `url(#${maskId})`;\n    // maskContainer.style.position = \"relative\";\n    // maskContainer.style.maskRepeat = \"no-repeat\";\n    // maskContainer.style.maskPosition = \"center\";\n    // maskContainer.style.maskSize = \"100% 100%\";\n    // maskContainer.style.width = \"100%\";\n    // maskContainer.style.height = \"100%\";\n    // Append SVG to maskContainer\n    maskContainer.innerHTML = svgContent;\n    container.parentNode.insertBefore(maskContainer, container);\n    maskContainer.appendChild(container);\n    return maskContainer.querySelector(\"svg\");\n}\n\n});\n\nparcelRegister(\"2rxJM\", function(module, exports) {\n\n$parcel$export(module.exports, \"setLinesWrapper\", () => $1c7845f0e1de0887$export$8f060496e19d4bbb);\nfunction $1c7845f0e1de0887$export$8f060496e19d4bbb(lines, callback) {\n    // Wrap each line in a .line-wrapper span\n    lines.forEach((line)=>{\n        const wrapper = document.createElement(\"span\");\n        wrapper.classList.add(\"line-wrapper\");\n        line.parentNode.insertBefore(wrapper, line);\n        wrapper.appendChild(line);\n    });\n    if (typeof callback === \"function\") callback();\n}\n\n});\n\nparcelRegister(\"kpGgi\", function(module, exports) {\n\n$parcel$export(module.exports, \"getElementHeightInRem\", () => $edc6ecc670d98733$export$d6278f2ff6cc02ee);\n/**\n * Converts a length value from any CSS unit to pixels.\n * @param {string} value - The length value as a string (e.g., \"2rem\", \"50px\").\n * @returns {number} - The length value in pixels.\n */ function $edc6ecc670d98733$var$convertToPixels(value) {\n    // Create a temporary element to use the browser's rendering to convert the value to pixels\n    const tempElement = document.createElement(\"div\");\n    tempElement.style.position = \"absolute\";\n    tempElement.style.visibility = \"hidden\";\n    tempElement.style.width = value;\n    document.body.appendChild(tempElement);\n    const pixelValue = parseFloat(window.getComputedStyle(tempElement).width);\n    document.body.removeChild(tempElement);\n    return pixelValue;\n}\nfunction $edc6ecc670d98733$export$d6278f2ff6cc02ee(element) {\n    if (!element) throw new Error(\"Element is required\");\n    // Get the computed style of the element\n    const computedStyle = window.getComputedStyle(element);\n    // Get the height of the element in pixels\n    const heightInPixels = parseFloat(computedStyle.height);\n    // Get the font size of the root element (html) in rem units and convert it to pixels\n    const rootFontSizeInRem = window.getComputedStyle(document.documentElement).fontSize;\n    const rootFontSizeInPixels = $edc6ecc670d98733$var$convertToPixels(rootFontSizeInRem);\n    // Calculate height in rem units\n    const heightInRem = heightInPixels / rootFontSizeInPixels;\n    return heightInRem;\n}\n\n});\n\n\nvar $cljH0 = parcelRequire(\"cljH0\");\n// Link timelines to scroll position\nfunction $719658c63b791dcb$var$createScrollTrigger(triggerElement, start, end, delay, withScroll) {\n    const squares = triggerElement.querySelectorAll(\"rect\");\n    gsap.set(squares, {\n        opacity: 0\n    });\n    const trigger = {\n        trigger: triggerElement,\n        scrub: true,\n        start: start\n    };\n    if (!withScroll) {\n        trigger.onEnter = ()=>{\n            gsap.to(squares, {\n                opacity: 1,\n                delay: delay,\n                duration: 0.01,\n                stagger: {\n                    each: 0.01,\n                    from: \"random\"\n                },\n                ease: \"bounce.out\"\n            });\n        };\n        gsap.timeline({\n            scrollTrigger: trigger\n        });\n    } else {\n        trigger.end = end;\n        gsap.timeline({\n            scrollTrigger: trigger\n        }).to(squares, {\n            opacity: 1,\n            duration: 0.01,\n            stagger: {\n                each: 0.01,\n                from: \"random\"\n            },\n            ease: \"none\"\n        });\n    }\n}\nfunction $719658c63b791dcb$export$e727d27e39c4b766() {\n    const blocks = document.querySelectorAll(\"[stagger-heading]\");\n    blocks.forEach((el)=>{\n        const maskEl = (0, $cljH0.createSVGGrid)(el, 10);\n        const startVal = el.dataset.startPos || \"top top\", endVal = el.dataset.endPos || \"bottom center\", delay = el.dataset.delay || 0, withScrollTrigger = el.dataset.withScroll || false;\n        $719658c63b791dcb$var$createScrollTrigger(maskEl, startVal, endVal, delay, withScrollTrigger);\n    });\n}\n\n\n\nvar $2rxJM = parcelRequire(\"2rxJM\");\n// Link timelines to scroll position\nfunction $1aa2e0393d0f1beb$var$createScrollTrigger(triggerElement, elements, start, end, stagger, delay, withScroll) {\n    const trigger = {\n        trigger: triggerElement,\n        scrub: true,\n        start: start\n    };\n    if (!withScroll) {\n        trigger.onEnter = ()=>{\n            gsap.to(elements, {\n                yPercent: 0,\n                stagger: stagger,\n                ease: \"power4.out\",\n                delay: Number(delay)\n            });\n        };\n        gsap.timeline({\n            scrollTrigger: trigger\n        });\n    } else {\n        trigger.end = end;\n        gsap.timeline({\n            scrollTrigger: trigger\n        }).to(words, {\n            yPercent: 0,\n            stagger: stagger,\n            ease: \"none\"\n        });\n    }\n}\nfunction $1aa2e0393d0f1beb$export$1601281ad392a6d8() {\n    // Split all words on the brand core section\n    const staggerTextEls = new SplitType(\"[stagger-text]\", {\n        types: \"lines\",\n        tagName: \"span\"\n    });\n    (0, $2rxJM.setLinesWrapper)(staggerTextEls.lines, ()=>{\n        gsap.set(\"[stagger-text] .line\", {\n            yPercent: 100\n        });\n    });\n    const textBlocks = document.querySelectorAll(\"[stagger-text]\");\n    textBlocks.forEach((el)=>{\n        const words1 = el.querySelectorAll(\".line\"), startVal = el.dataset.startPos || \"top top\", endVal = el.dataset.endPos || \"bottom center\", stagger = el.dataset.stagger || 0.05, delay = el.dataset.delay || 0, withScrollTrigger = el.dataset.withScroll || false;\n        // let tl = gsap.timeline({ paused: true });\n        $1aa2e0393d0f1beb$var$createScrollTrigger(el, words1, startVal, endVal, stagger, delay, withScrollTrigger);\n    });\n}\n\n\nfunction $7650bdc578b78d7e$export$e49bfc3e559db7() {\n    const buttons = document.querySelectorAll(\".button\");\n    if (!buttons) return;\n    buttons.forEach((button)=>{\n        const buttonBg = button.querySelector(\".button-bg\");\n        const buttonLabel = button.querySelector(\".button-label-inner\");\n        const isRounded = button.classList.contains(\"is-giga\");\n        let buttonLabelChars;\n        if (buttonLabel) buttonLabelChars = new SplitType(buttonLabel, {\n            types: \"chars\",\n            tagName: \"span\"\n        });\n        if (buttonBg) {\n            if (isRounded) gsap.set(buttonBg, {\n                scale: 0\n            });\n            else gsap.set(buttonBg, {\n                yPercent: 100\n            });\n        }\n        button.addEventListener(\"mouseenter\", ()=>{\n            if (buttonBg) {\n                const animation = {\n                    duration: 0.3,\n                    ease: \"expo.out\"\n                };\n                if (!isRounded) animation.yPercent = 0;\n                else animation.scale = 1;\n                gsap.to(buttonBg, animation);\n            }\n            if (buttonLabel && buttonLabelChars) gsap.to(buttonLabelChars.chars, {\n                yPercent: -100,\n                stagger: 0.01,\n                duration: 0.3,\n                ease: \"expo.out\",\n                immediateRender: true\n            });\n            const circles = button.querySelectorAll(\"svg circle\");\n            if (circles) gsap.fromTo(button.querySelectorAll(\"svg circle\"), {\n                opacity: 0\n            }, {\n                opacity: 1,\n                duration: 0.01,\n                stagger: {\n                    from: \"random\",\n                    each: 0.1\n                }\n            });\n        });\n        button.addEventListener(\"mouseleave\", ()=>{\n            if (buttonBg) {\n                const animation = {\n                    duration: 0.3,\n                    ease: \"expo.out\"\n                };\n                if (!isRounded) animation.yPercent = 100;\n                else animation.scale = 0;\n                gsap.to(buttonBg, animation);\n            }\n            if (buttonLabel && buttonLabelChars) gsap.set(buttonLabelChars.chars, {\n                yPercent: 0\n            });\n        });\n    });\n}\n\n\nfunction $8d7867a2083184cb$export$85958f7fefbafb9() {\n    const videos = document.querySelectorAll(\"video[play-onscroll]\");\n    if (!videos) return;\n    videos.forEach((video)=>{\n        const start = video.dataset.start || \"top bottom\";\n        const pauseOutside = video.dataset.pauseOutside === \"true\";\n        const rewind = video.dataset.rewind === \"true\";\n        const loop = video.dataset.loop === \"true\";\n        if (loop) video.loop = true;\n        let settings = {\n            trigger: video,\n            start: start,\n            onEnter: ()=>{\n                video.play();\n            }\n        };\n        if (pauseOutside) {\n            settings.onLeave = ()=>{\n                $8d7867a2083184cb$var$pauseOrRewind(video, rewind);\n            };\n            settings.onLeaveBack = ()=>{\n                $8d7867a2083184cb$var$pauseOrRewind(video, rewind);\n            };\n            settings.onEnterBack = ()=>{\n                console.log(\"play video\");\n                video.play();\n            };\n        } else settings.once = true;\n        ScrollTrigger.create(settings);\n    });\n}\nfunction $8d7867a2083184cb$var$pauseOrRewind(video, rewind) {\n    video.pause();\n    if (rewind) video.currentTime = 0;\n}\n\n\n\nvar $kpGgi = parcelRequire(\"kpGgi\");\nfunction $7ec1dfd28ff53463$export$50e34a31bc7d170d() {\n    const nav = document.querySelector(\".header .nav\"), dropdowns = nav.querySelectorAll(\".nav-dropdown-trigger-wrapper\"), dropdownEl = nav.querySelector(\".nav-dropdown-el\"), dropdownInner = nav.querySelector(\".nav-dropdown-el-inner\");\n    gsap.set(dropdownInner.querySelectorAll(\"[data-menu]\"), {\n        display: \"none\"\n    });\n    gsap.set(dropdownInner, {\n        height: \"0rem\"\n    });\n    let isHover = false;\n    let currentMenu;\n    dropdowns.forEach((dropdown)=>{\n        const id = dropdown.dataset.menu;\n        const bg = dropdown.querySelector(\".button-bg\");\n        // const iconClosed = dropdown.querySelector(\".nav-dropdown-icon.closed\");\n        const iconOpen = dropdown.querySelector(\".nav-dropdown-icon.open\");\n        if (!id) return;\n        const dropdownChars = new SplitType(dropdown.querySelector(\".button-label-inner\"), {\n            types: \"chars\",\n            tagName: \"span\"\n        });\n        gsap.set(bg, {\n            yPercent: 100\n        });\n        gsap.set(iconOpen.querySelectorAll(\"circle\"), {\n            opacity: 0\n        });\n        dropdown.addEventListener(\"mouseenter\", (e)=>{\n            if (currentMenu === id) return;\n            if (currentMenu) {\n                const previousActiveEl = nav.querySelector(`.nav-dropdown-trigger-wrapper[data-menu=\"${currentMenu}\"]`);\n                $7ec1dfd28ff53463$var$setOffState(previousActiveEl);\n            }\n            isHover = true;\n            currentMenu = id;\n            $7ec1dfd28ff53463$var$setOnState(dropdown);\n            // Logic for dropdown menu\n            const activeMenu = dropdownInner.querySelector(`[data-menu=\"${id}\"]`);\n            dropdownEl.classList.add(\"active\");\n            gsap.set(dropdownInner.querySelectorAll(\"[data-menu]\"), {\n                display: \"none\"\n            });\n            gsap.set(activeMenu, {\n                display: \"grid\"\n            });\n            const activeHeight = (0, $kpGgi.getElementHeightInRem)(activeMenu);\n            gsap.to(dropdownInner, {\n                height: `${activeHeight}rem`,\n                duration: 0.3,\n                ease: \"expo.out\"\n            });\n        });\n        nav.addEventListener(\"mouseleave\", (e)=>{\n            isHover = false;\n            currentMenu = null;\n            $7ec1dfd28ff53463$var$setAllOffStates(dropdowns);\n            if (!$7ec1dfd28ff53463$var$isMouseOverElement(nav, e)) gsap.to(dropdownInner, {\n                height: `0rem`,\n                duration: 0.3,\n                ease: \"expo.out\",\n                onComplete: ()=>{\n                    gsap.set(dropdownInner.querySelectorAll(\"[data-menu]\"), {\n                        display: \"none\"\n                    });\n                    dropdownEl.classList.remove(\"active\");\n                }\n            });\n        });\n    });\n}\nfunction $7ec1dfd28ff53463$var$isMouseOverElement(element, event) {\n    // Check if the mouse is over the specified element or its descendants\n    return element.contains(event.relatedTarget);\n}\nfunction $7ec1dfd28ff53463$var$setOnState(el) {\n    gsap.to(el.querySelectorAll(\".char\"), {\n        yPercent: -100,\n        stagger: 0.01,\n        duration: 0.3,\n        ease: \"expo.out\",\n        immediateRender: true\n    });\n    gsap.to(el.querySelector(\".button-bg\"), {\n        yPercent: 0,\n        duration: 0.3,\n        ease: \"expo.out\"\n    });\n    gsap.to(el.querySelectorAll(\".closed circle\"), {\n        opacity: 0,\n        duration: 0.01,\n        stagger: {\n            each: 0.1\n        }\n    });\n    gsap.to(el.querySelectorAll(\".open circle\"), {\n        opacity: 1,\n        duration: 0.01,\n        stagger: {\n            each: 0.1\n        }\n    });\n}\nfunction $7ec1dfd28ff53463$var$setOffState(el) {\n    gsap.set(el.querySelectorAll(\".char\"), {\n        yPercent: 0\n    });\n    gsap.to(el.querySelector(\".button-bg\"), {\n        yPercent: 100,\n        duration: 0.3,\n        ease: \"expo.out\"\n    });\n    gsap.to(el.querySelectorAll(\".closed circle\"), {\n        opacity: 1,\n        duration: 0.01,\n        stagger: {\n            each: 0.1\n        }\n    });\n    gsap.to(el.querySelectorAll(\".open circle\"), {\n        opacity: 0,\n        duration: 0.01,\n        stagger: {\n            each: 0.1\n        }\n    });\n}\nfunction $7ec1dfd28ff53463$var$setAllOffStates(dropdowns) {\n    dropdowns.forEach((el)=>$7ec1dfd28ff53463$var$setOffState(el));\n}\n\n\nfunction $d9d8e6151a123ccd$export$fc2ce4586759bfa0() {\n    const imageMasks = document.querySelectorAll(\".image-mask\");\n    if (!imageMasks) return;\n    imageMasks.forEach((el)=>{\n        if (el.classList.contains(\"diamond\")) $d9d8e6151a123ccd$var$setDiamondMask(el);\n    });\n}\nfunction $d9d8e6151a123ccd$var$setDiamondMask(el) {\n    const start = el.dataset.startPos || \"center bottom\";\n    gsap.set(el, {\n        clipPath: \"polygon(100% 0%, 100% 0%, 0% 100%, 0% 100%, 0% 100%, 100% 0%)\"\n    });\n    gsap.timeline({\n        scrollTrigger: {\n            trigger: el,\n            scrub: true,\n            start: start,\n            onEnter: ()=>{\n                gsap.fromTo(el, {\n                    clipPath: \"polygon(100% 0%, 100% 0%, 0% 100%, 0% 100%, 0% 100%, 100% 0%)\"\n                }, {\n                    clipPath: \"polygon(100% 0%, 60% 0%, 0% 60%, 0% 100%, 40% 100%, 100% 40%)\",\n                    duration: 1,\n                    ease: \"expo.out\"\n                });\n            }\n        }\n    });\n}\n\n\n// Link timelines to scroll position\nfunction $4013e65a83b1b778$var$createScrollList(triggerElement, elements, start, stagger, delay) {\n    gsap.set(elements, {\n        yPercent: 100,\n        opacity: 0\n    });\n    gsap.timeline({\n        scrollTrigger: {\n            trigger: triggerElement,\n            scrub: true,\n            start: start,\n            onEnter: ()=>{\n                gsap.to(elements, {\n                    yPercent: 0,\n                    opacity: 1,\n                    stagger: stagger,\n                    ease: \"power4.out\",\n                    delay: Number(delay)\n                });\n            }\n        }\n    });\n}\nfunction $4013e65a83b1b778$export$9b05384e3b3cbff1() {\n    const list = document.querySelectorAll(\"[stagger-list]\");\n    if (!list) return;\n    list.forEach((el)=>{\n        const elements = el.querySelectorAll(\"[stagger-el]\"), startVal = el.dataset.startPos || \"top top\", stagger = el.dataset.stagger || 0.05, delay = el.dataset.delay || 0;\n        if (!elements) return;\n        $4013e65a83b1b778$var$createScrollList(el, elements, startVal, stagger, delay);\n    });\n}\n\n\n(0, $7ec1dfd28ff53463$export$50e34a31bc7d170d)();\n(0, $719658c63b791dcb$export$e727d27e39c4b766)();\n(0, $1aa2e0393d0f1beb$export$1601281ad392a6d8)();\n(0, $7650bdc578b78d7e$export$e49bfc3e559db7)();\n(0, $8d7867a2083184cb$export$85958f7fefbafb9)();\n(0, $d9d8e6151a123ccd$export$fc2ce4586759bfa0)();\n(0, $4013e65a83b1b778$export$9b05384e3b3cbff1)();\n\n})();\n//# sourceMappingURL=globals.js.map\n","export function createSVGGrid(container, squaresPerRow) {\n  if (!container) {\n    console.error(\"Container not found\");\n    return;\n  }\n\n  // Get the container's dimensions\n  const containerWidth = container.clientWidth;\n  const containerHeight = container.clientHeight;\n\n  // Calculate the size of each square\n  const squareSize = parseInt(containerWidth / squaresPerRow);\n\n  // Calculate the number of squares per column\n  const squaresPerColumn = Math.ceil(containerHeight / squareSize);\n\n  // Create a unique ID for the mask\n  const maskId = \"mask-\" + Math.random().toString(36).substr(2, 9);\n\n  // Create SVG content\n  let svgContent = `\n                <svg viewBox=\"0 0 ${containerWidth} ${containerHeight}\" xmlns=\"http://www.w3.org/2000/svg\" preserveAspectRatio=\"none\" style=\"position:absolute;top:0;left:0;width:100%;height:100%;pointer-events:none;\">\n                    <defs>\n                        <mask id=\"${maskId}\">\n                            ${Array.from({ length: squaresPerColumn })\n                              .map((_, row) =>\n                                Array.from({ length: squaresPerRow })\n                                  .map((_, col) => {\n                                    const x = col * squareSize;\n                                    const y = row * squareSize;\n                                    return `<rect x=\"${x}\" y=\"${y}\" width=\"${squareSize + 1}\" height=\"${squareSize + 1}\"/>`;\n                                  })\n                                  .join(\"\")\n                              )\n                              .join(\"\")}\n                        </mask>\n                    </defs>\n                </svg>`;\n\n  // Create wrapper for the SVG and mask\n  const maskContainer = document.createElement(\"div\");\n  maskContainer.className = \"mask-container\";\n  maskContainer.style.maskImage = `url(#${maskId})`;\n  // maskContainer.style.position = \"relative\";\n  // maskContainer.style.maskRepeat = \"no-repeat\";\n  // maskContainer.style.maskPosition = \"center\";\n  // maskContainer.style.maskSize = \"100% 100%\";\n  // maskContainer.style.width = \"100%\";\n  // maskContainer.style.height = \"100%\";\n\n  // Append SVG to maskContainer\n  maskContainer.innerHTML = svgContent;\n  container.parentNode.insertBefore(maskContainer, container);\n\n  maskContainer.appendChild(container);\n\n  return maskContainer.querySelector('svg');\n}\n","export function setLinesWrapper(lines, callback) {\n  // Wrap each line in a .line-wrapper span\n  lines.forEach(line => {\n    const wrapper = document.createElement('span');\n    wrapper.classList.add('line-wrapper');\n    line.parentNode.insertBefore(wrapper, line);\n    wrapper.appendChild(line);\n  });\n\n  if (typeof callback === 'function') {\n    callback();\n  }\n}","/**\n * Converts a length value from any CSS unit to pixels.\n * @param {string} value - The length value as a string (e.g., \"2rem\", \"50px\").\n * @returns {number} - The length value in pixels.\n */\nfunction convertToPixels(value) {\n  // Create a temporary element to use the browser's rendering to convert the value to pixels\n  const tempElement = document.createElement(\"div\");\n  tempElement.style.position = \"absolute\";\n  tempElement.style.visibility = \"hidden\";\n  tempElement.style.width = value;\n  document.body.appendChild(tempElement);\n  const pixelValue = parseFloat(window.getComputedStyle(tempElement).width);\n  document.body.removeChild(tempElement);\n  return pixelValue;\n}\n\n/**\n * Calculates the height of an element in rem units.\n * @param {HTMLElement} element - The target element.\n * @returns {number} - The height of the element in rem units.\n */\nexport function getElementHeightInRem(element) {\n  if (!element) {\n    throw new Error(\"Element is required\");\n  }\n\n  // Get the computed style of the element\n  const computedStyle = window.getComputedStyle(element);\n\n  // Get the height of the element in pixels\n  const heightInPixels = parseFloat(computedStyle.height);\n\n  // Get the font size of the root element (html) in rem units and convert it to pixels\n  const rootFontSizeInRem = window.getComputedStyle(\n    document.documentElement\n  ).fontSize;\n  const rootFontSizeInPixels = convertToPixels(rootFontSizeInRem);\n\n  // Calculate height in rem units\n  const heightInRem = heightInPixels / rootFontSizeInPixels;\n\n  return heightInRem;\n}\n","import { setStaggerHeading } from \"./modules/staggerHeading\";\nimport { setStaggerText } from \"./modules/staggerText\";\nimport { initButtonStates } from \"./modules/buttonStates\";\nimport { playVideoOnScroll } from \"./modules/playVideoOnScroll\";\nimport { initMenus } from \"./modules/menus\";\nimport { setImageMasks } from \"./modules/setImageMasks\";\nimport { setStaggerElements } from \"./modules/staggerElements\";\n\ninitMenus();\nsetStaggerHeading();\nsetStaggerText();\ninitButtonStates();\nplayVideoOnScroll();\nsetImageMasks();\nsetStaggerElements();","import { createSVGGrid } from \"./createSVGGrid\";\n\n// Link timelines to scroll position\nfunction createScrollTrigger(triggerElement, start, end, delay, withScroll) {\n  const squares = triggerElement.querySelectorAll('rect');\n\n  gsap.set(squares, { opacity: 0 });\n  const trigger = {\n    trigger: triggerElement,\n    scrub: true,\n    start,\n  };\n\n  if (!withScroll) {\n    trigger.onEnter = () => {\n      gsap.to(squares, {\n        opacity: 1,\n        delay: delay,\n        duration: 0.01,\n        stagger: {\n          each: 0.01,\n          from: \"random\",\n        },\n        ease: \"bounce.out\"\n      });\n    };\n\n    gsap.timeline({ scrollTrigger: trigger });\n  } else {\n    trigger.end = end;\n    gsap\n      .timeline({\n        scrollTrigger: trigger,\n      })\n      .to(squares, {\n        opacity: 1,\n        duration: 0.01,\n        stagger: {\n          each: 0.01,\n          from: \"random\",\n        },\n        ease: \"none\",\n      });\n  }\n}\n\nexport function setStaggerHeading() {\n  const blocks = document.querySelectorAll(\"[stagger-heading]\");\n\n  blocks.forEach((el) => {\n    const maskEl = createSVGGrid(el, 10);\n    const startVal = el.dataset.startPos || \"top top\",\n      endVal = el.dataset.endPos || \"bottom center\",\n      delay = el.dataset.delay || 0,\n      withScrollTrigger = el.dataset.withScroll || false;\n    createScrollTrigger(maskEl, startVal, endVal, delay, withScrollTrigger);\n  });\n}\n","import { setLinesWrapper } from \"./setLinesWrapper\";\n\n// Link timelines to scroll position\nfunction createScrollTrigger(triggerElement, elements, start, end, stagger, delay, withScroll) {\n  const trigger = {\n    trigger: triggerElement,\n    scrub: true,\n    start,\n  };\n\n  if (!withScroll) {\n    trigger.onEnter = () => {\n      gsap.to(elements, {\n        yPercent: 0,\n        stagger: stagger,\n        ease: \"power4.out\",\n        delay: Number(delay),\n      });\n    };\n\n    gsap.timeline({ scrollTrigger: trigger });\n  } else {\n    trigger.end = end;\n    gsap\n      .timeline({\n        scrollTrigger: trigger,\n      })\n      .to(words, {\n        yPercent: 0,\n        stagger: stagger,\n        ease: \"none\",\n      });\n  }\n}\n\nexport function setStaggerText() {\n  // Split all words on the brand core section\n  const staggerTextEls = new SplitType(\"[stagger-text]\", {\n    types: \"lines\",\n    tagName: \"span\",\n  });\n\n  setLinesWrapper(staggerTextEls.lines, () => {\n    gsap.set(\"[stagger-text] .line\", { yPercent: 100 });\n  });\n\n  const textBlocks = document.querySelectorAll(\"[stagger-text]\");\n\n  textBlocks.forEach((el) => {\n    const words = el.querySelectorAll(\".line\"),\n      startVal = el.dataset.startPos || \"top top\",\n      endVal = el.dataset.endPos || \"bottom center\",\n      stagger = el.dataset.stagger || 0.05,\n      delay = el.dataset.delay || 0,\n      withScrollTrigger = el.dataset.withScroll || false;\n    // let tl = gsap.timeline({ paused: true });\n    createScrollTrigger(el, words, startVal, endVal, stagger, delay, withScrollTrigger);\n  });\n}\n","export function initButtonStates() {\n  const buttons = document.querySelectorAll(\".button\");\n\n  if (!buttons) {\n    return;\n  }\n\n  buttons.forEach((button) => {\n    const buttonBg = button.querySelector(\".button-bg\");\n    const buttonLabel = button.querySelector('.button-label-inner');\n    const isRounded = button.classList.contains('is-giga');\n    let buttonLabelChars;\n\n    if (buttonLabel) {\n      buttonLabelChars = new SplitType(\n        buttonLabel,\n        {\n          types: \"chars\",\n          tagName: \"span\",\n        }\n      );\n    }\n\n    if (buttonBg) {\n      if (isRounded) {\n        gsap.set(buttonBg, { scale: 0 });\n      } else {\n        gsap.set(buttonBg, { yPercent: 100 });\n      }\n    }\n    button.addEventListener(\"mouseenter\", () => {\n      if (buttonBg) {\n        const animation = {\n          duration: 0.3,\n          ease: \"expo.out\",\n        };\n\n        if (!isRounded) {\n          animation.yPercent = 0;\n        } else {\n          animation.scale = 1;\n        }\n\n        gsap.to(buttonBg, animation);\n      }\n      if (buttonLabel && buttonLabelChars) {\n        gsap.to(buttonLabelChars.chars, {\n          yPercent: -100,\n          stagger: 0.01,\n          duration: 0.3,\n          ease: \"expo.out\",\n          immediateRender: true,\n        });\n      }\n\n      const circles = button.querySelectorAll(\"svg circle\");\n      if (circles) {\n        gsap.fromTo(\n          button.querySelectorAll(\"svg circle\"),\n          {\n            opacity: 0,\n          },\n          {\n            opacity: 1,\n            duration: 0.01,\n            stagger: {\n              from: \"random\",\n              each: 0.1,\n            },\n          }\n        );\n      }\n    });\n\n    button.addEventListener(\"mouseleave\", () => {\n      if (buttonBg) {\n        const animation = {\n          duration: 0.3,\n          ease: \"expo.out\",\n        };\n\n        if (!isRounded) {\n          animation.yPercent = 100;\n        } else {\n          animation.scale = 0;\n        }\n\n        gsap.to(buttonBg, animation);\n      }\n\n      if (buttonLabel && buttonLabelChars) {\n        gsap.set(buttonLabelChars.chars, { yPercent: 0 });\n      }\n    });\n  });\n}\n","export function playVideoOnScroll() {\n  const videos = document.querySelectorAll('video[play-onscroll]');\n\n  if (!videos) {\n    return;\n  }\n\n  videos.forEach((video) => {\n    const start = video.dataset.start || 'top bottom';\n    const pauseOutside = video.dataset.pauseOutside === 'true';\n    const rewind = video.dataset.rewind === 'true';\n    const loop = video.dataset.loop === 'true';\n\n    if (loop) {\n      video.loop = true;\n    }\n    \n    let settings = {\n      trigger: video,\n      start: start,\n      onEnter: () => {\n        video.play();\n      }\n    };\n\n    if (pauseOutside) {\n      settings.onLeave = () => { pauseOrRewind(video, rewind) };\n      settings.onLeaveBack = () => { pauseOrRewind(video, rewind) };\n      settings.onEnterBack = () => { console.log(\"play video\"); video.play() };\n    } else {\n      settings.once = true;\n    }\n\n    ScrollTrigger.create(settings);\n  });\n}\n\nfunction pauseOrRewind(video, rewind) {\n  video.pause();\n  if (rewind) {\n    video.currentTime = 0;\n  }\n}","import { getElementHeightInRem } from \"./getHeight\";\n\nexport function initMenus() {\n  const nav = document.querySelector(\".header .nav\"),\n    dropdowns = nav.querySelectorAll(\".nav-dropdown-trigger-wrapper\"),\n    dropdownEl = nav.querySelector(\".nav-dropdown-el\"),\n    dropdownInner = nav.querySelector(\".nav-dropdown-el-inner\");\n\n  gsap.set(dropdownInner.querySelectorAll(\"[data-menu]\"), { display: \"none\" });\n  gsap.set(dropdownInner, { height: \"0rem\" });\n  let isHover = false;\n  let currentMenu;\n\n  dropdowns.forEach((dropdown) => {\n    const id = dropdown.dataset.menu;\n    const bg = dropdown.querySelector(\".button-bg\");\n    // const iconClosed = dropdown.querySelector(\".nav-dropdown-icon.closed\");\n    const iconOpen = dropdown.querySelector(\".nav-dropdown-icon.open\");\n\n    if (!id) {\n      return;\n    }\n\n    const dropdownChars = new SplitType(\n      dropdown.querySelector(\".button-label-inner\"),\n      {\n        types: \"chars\",\n        tagName: \"span\",\n      }\n    );\n\n    gsap.set(bg, { yPercent: 100 });\n    gsap.set(iconOpen.querySelectorAll(\"circle\"), { opacity: 0 });\n\n    dropdown.addEventListener(\"mouseenter\", (e) => {\n      if (currentMenu === id) {\n        return;\n      }\n      \n      if (currentMenu) {\n        const previousActiveEl = nav.querySelector(\n          `.nav-dropdown-trigger-wrapper[data-menu=\"${currentMenu}\"]`\n        );\n        setOffState(previousActiveEl);\n      }\n\n      isHover = true;\n      currentMenu = id;\n\n      setOnState(dropdown);\n\n      // Logic for dropdown menu\n      const activeMenu = dropdownInner.querySelector(`[data-menu=\"${id}\"]`);\n\n      dropdownEl.classList.add(\"active\");\n      gsap.set(dropdownInner.querySelectorAll(\"[data-menu]\"), {\n        display: \"none\",\n      });\n      gsap.set(activeMenu, { display: \"grid\" });\n\n      const activeHeight = getElementHeightInRem(activeMenu);\n      gsap.to(dropdownInner, {\n        height: `${activeHeight}rem`,\n        duration: 0.3,\n        ease: \"expo.out\",\n      });\n    });\n\n    nav.addEventListener(\"mouseleave\", (e) => {\n      isHover = false;\n      currentMenu = null;\n\n      setAllOffStates(dropdowns);\n\n      if (!isMouseOverElement(nav, e)) {\n        gsap.to(dropdownInner, {\n          height: `0rem`,\n          duration: 0.3,\n          ease: \"expo.out\",\n          onComplete: () => {\n            gsap.set(dropdownInner.querySelectorAll(\"[data-menu]\"), {\n              display: \"none\",\n            });\n            dropdownEl.classList.remove(\"active\");\n          },\n        });\n      }\n    });\n  });\n}\n\nfunction isMouseOverElement(element, event) {\n  // Check if the mouse is over the specified element or its descendants\n  return element.contains(event.relatedTarget);\n}\n\nfunction setOnState(el) {\n  gsap.to(el.querySelectorAll('.char'), {\n    yPercent: -100,\n    stagger: 0.01,\n    duration: 0.3,\n    ease: \"expo.out\",\n    immediateRender: true,\n  });\n\n  gsap.to(el.querySelector('.button-bg'), {\n    yPercent: 0,\n    duration: 0.3,\n    ease: \"expo.out\",\n  });\n\n  gsap.to(el.querySelectorAll(\".closed circle\"), {\n    opacity: 0,\n    duration: 0.01,\n    stagger: {\n      each: 0.1,\n      // from: \"random\",\n    },\n  });\n\n  gsap.to(el.querySelectorAll(\".open circle\"), {\n    opacity: 1,\n    duration: 0.01,\n    stagger: {\n      each: 0.1,\n      // from: \"random\",\n    },\n  });\n}\n\nfunction setOffState(el) {\n  gsap.set(el.querySelectorAll(\".char\"), {\n    yPercent: 0,\n  });\n\n  gsap.to(el.querySelector(\".button-bg\"), {\n    yPercent: 100,\n    duration: 0.3,\n    ease: \"expo.out\",\n  });\n\n  gsap.to(el.querySelectorAll(\".closed circle\"), {\n    opacity: 1,\n    duration: 0.01,\n    stagger: {\n      each: 0.1,\n      // from: \"random\",\n    },\n  });\n\n  gsap.to(el.querySelectorAll(\".open circle\"), {\n    opacity: 0,\n    duration: 0.01,\n    stagger: {\n      each: 0.1,\n      // from: \"random\",\n    },\n  });\n}\n\nfunction setAllOffStates(dropdowns) {\n  dropdowns.forEach(el => setOffState(el));\n}","export function setImageMasks() {\n  const imageMasks = document.querySelectorAll('.image-mask');\n\n  if (!imageMasks) {\n    return;\n  }\n\n  imageMasks.forEach(el => {\n    if (el.classList.contains('diamond')) {\n      setDiamondMask(el);\n    }\n  });\n}\n\nfunction setDiamondMask(el) {\n  const start = el.dataset.startPos || \"center bottom\";\n  gsap.set(el, {\n    clipPath: \"polygon(100% 0%, 100% 0%, 0% 100%, 0% 100%, 0% 100%, 100% 0%)\",\n  });\n  gsap.timeline({\n    scrollTrigger: {\n      trigger: el,\n      scrub: true,\n      start,\n      onEnter: () => {\n        gsap.fromTo(\n          el,\n          {\n            clipPath: \"polygon(100% 0%, 100% 0%, 0% 100%, 0% 100%, 0% 100%, 100% 0%)\",\n          },\n          {\n            clipPath: \"polygon(100% 0%, 60% 0%, 0% 60%, 0% 100%, 40% 100%, 100% 40%)\",\n            duration: 1,\n            ease: \"expo.out\",\n          }\n        );\n      },\n    },\n  });\n}","// Link timelines to scroll position\nfunction createScrollList(\n  triggerElement,\n  elements,\n  start,\n  stagger,\n  delay,\n) {\n  gsap.set(elements, {\n    yPercent: 100,\n    opacity: 0,\n  })\n\n  gsap.timeline({\n    scrollTrigger: {\n      trigger: triggerElement,\n      scrub: true,\n      start,\n      onEnter: () => {\n        gsap.to(elements, {\n          yPercent: 0,\n          opacity: 1,\n          stagger,\n          ease: \"power4.out\",\n          delay: Number(delay),\n        });\n      },\n    },\n  });\n}\n\nexport function setStaggerElements() {\n  const list = document.querySelectorAll(\"[stagger-list]\");\n\n  if (!list) {\n    return;\n  }\n\n  list.forEach((el) => {\n    const elements = el.querySelectorAll(\"[stagger-el]\"),\n      startVal = el.dataset.startPos || \"top top\",\n      stagger = el.dataset.stagger || 0.05,\n      delay = el.dataset.delay || 0;\n    \n    if (!elements) {\n      return;\n    }\n    \n    createScrollList(el, elements, startVal, stagger, delay);\n  });\n}\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","$8fc6b8bbd146cdca$export$d47c320381fa2abf","container","squaresPerRow","console","error","containerWidth","clientWidth","containerHeight","clientHeight","squareSize","parseInt","squaresPerColumn","Math","ceil","maskId","random","toString","substr","svgContent","Array","from","length","map","_","row","col","join","maskContainer","document","createElement","className","style","maskImage","innerHTML","parentNode","insertBefore","appendChild","querySelector","$1c7845f0e1de0887$export$8f060496e19d4bbb","lines","callback","forEach","line","wrapper","classList","add","$edc6ecc670d98733$export$d6278f2ff6cc02ee","element","heightInPixels","parseFloat","computedStyle","window","getComputedStyle","height","$edc6ecc670d98733$var$convertToPixels","value","tempElement","position","visibility","width","body","pixelValue","removeChild","documentElement","fontSize","$cljH0","$2rxJM","$8d7867a2083184cb$var$pauseOrRewind","video","rewind","pause","currentTime","$kpGgi","$7ec1dfd28ff53463$var$setOffState","el","gsap","querySelectorAll","yPercent","to","duration","ease","opacity","stagger","each","currentMenu","nav","dropdowns","dropdownEl","dropdownInner","display","dropdown","dataset","menu","bg","iconOpen","SplitType","types","tagName","addEventListener","immediateRender","activeMenu","activeHeight","getElementHeightInRem","$7ec1dfd28ff53463$var$setAllOffStates","contains","event","relatedTarget","onComplete","remove","blocks","maskEl","createSVGGrid","startVal","startPos","$719658c63b791dcb$var$createScrollTrigger","triggerElement","start","end","delay","withScroll","squares","trigger","scrub","timeline","scrollTrigger","onEnter","endPos","staggerTextEls","setLinesWrapper","textBlocks","words1","endVal","withScrollTrigger","$1aa2e0393d0f1beb$var$createScrollTrigger","elements","words","Number","buttons","button","buttonLabelChars","buttonBg","buttonLabel","isRounded","scale","animation","chars","fromTo","videos","pauseOutside","loop","settings","play","onLeave","onLeaveBack","onEnterBack","log","once","ScrollTrigger","create","imageMasks","$d9d8e6151a123ccd$var$setDiamondMask","clipPath","list"],"version":3,"file":"globals.js.map"}