{"mappings":"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","sources":["<anon>","src/modules/createSVGGrid.js","src/modules/setLinesWrapper.js","src/services.js","src/services/slider.js","src/services/services.js"],"sourcesContent":["(() => {\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire5744\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire5744\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"cljH0\", function(module, exports) {\n\n$parcel$export(module.exports, \"createSVGGrid\", () => $8fc6b8bbd146cdca$export$d47c320381fa2abf);\nfunction $8fc6b8bbd146cdca$export$d47c320381fa2abf(container, squaresPerRow, fill, onlyEmbed) {\n    if (!container) {\n        console.error(\"Container not found\");\n        return;\n    }\n    // Get the container's dimensions\n    const containerWidth = container.clientWidth;\n    const containerHeight = container.clientHeight;\n    const responsiveSquares = window.innerWidth <= 991 ? squaresPerRow / 2 : squaresPerRow;\n    // Calculate the size of each square\n    const squareSize = parseInt(containerWidth / responsiveSquares);\n    // Calculate the number of squares per column\n    const squaresPerColumn = Math.ceil(containerHeight / squareSize);\n    // Create a unique ID for the mask\n    const maskId = \"mask-\" + Math.random().toString(36).substr(2, 9);\n    if (!onlyEmbed) {\n        // Create SVG content\n        let svgContent = `\n                <svg viewBox=\"0 0 ${containerWidth} ${containerHeight}\" xmlns=\"http://www.w3.org/2000/svg\" preserveAspectRatio=\"none\" style=\"position:absolute;top:0;left:0;width:100%;height:100%;pointer-events:none;\">\n                    <defs>\n                        <mask id=\"${maskId}\">\n                            ${Array.from({\n            length: squaresPerColumn\n        }).map((_, row)=>Array.from({\n                length: responsiveSquares\n            }).map((_, col)=>{\n                const x = col * squareSize;\n                const y = row * squareSize;\n                return `<rect x=\"${x}\" y=\"${y}\" width=\"${squareSize + 1}\" height=\"${squareSize + 1}\" fill=\"${fill ? fill : \"#000000\"}\"/>`;\n            }).join(\"\")).join(\"\")}\n                        </mask>\n                    </defs>\n                </svg>`;\n        // Create wrapper for the SVG and mask\n        const maskContainer = document.createElement(\"div\");\n        maskContainer.className = \"mask-container\";\n        maskContainer.style.maskImage = `url(#${maskId})`;\n        // Append SVG to maskContainer\n        maskContainer.innerHTML = svgContent;\n        container.parentNode.insertBefore(maskContainer, container);\n        maskContainer.appendChild(container);\n        return maskContainer.querySelector(\"svg\");\n    } else {\n        // Create SVG content\n        let svgContent = `\n                <svg viewBox=\"0 0 ${containerWidth} ${containerHeight}\" xmlns=\"http://www.w3.org/2000/svg\" preserveAspectRatio=\"none\" style=\"position:absolute;top:0;left:0;width:100%;height:100%;pointer-events:none;\">\n                            ${Array.from({\n            length: squaresPerColumn\n        }).map((_, row)=>Array.from({\n                length: squaresPerRow\n            }).map((_, col)=>{\n                const x = col * squareSize;\n                const y = row * squareSize;\n                return `<rect x=\"${x}\" y=\"${y}\" width=\"${squareSize + 1}\" height=\"${squareSize + 1}\" fill=\"${fill ? fill : \"#000000\"}\"/>`;\n            }).join(\"\")).join(\"\")}\n                </svg>`;\n        container.insertAdjacentHTML(\"beforeend\", svgContent);\n        return svgContent;\n    }\n}\n\n});\n\nparcelRegister(\"2rxJM\", function(module, exports) {\n\n$parcel$export(module.exports, \"setLinesWrapper\", () => $1c7845f0e1de0887$export$8f060496e19d4bbb);\nfunction $1c7845f0e1de0887$export$8f060496e19d4bbb(lines, callback) {\n    // Wrap each line in a .line-wrapper span\n    lines.forEach((line)=>{\n        const wrapper = document.createElement(\"span\");\n        wrapper.classList.add(\"line-wrapper\");\n        line.parentNode.insertBefore(wrapper, line);\n        wrapper.appendChild(line);\n    });\n    if (typeof callback === \"function\") callback();\n}\n\n});\n\nfunction $6efbc8d1b8f19358$export$ebbd8862ad385694() {\n    if (!document.querySelector(\".news-slider\")) return;\n    const sliders = document.querySelectorAll(\".news-slider\");\n    sliders.forEach((s)=>{\n        const slider = new Swiper(s, {\n            slidesPerView: \"auto\",\n            navigation: {\n                nextEl: \".slider-controls .button.next\",\n                prevEl: \".slider-controls .button.prev\"\n            }\n        });\n        // gsap logic\n        const slides = s.querySelectorAll(\".services-card\");\n        gsap.set(slides, {\n            y: \"3rem\",\n            opacity: 0\n        });\n        gsap.timeline({\n            scrollTrigger: {\n                trigger: s,\n                start: \"25% bottom\",\n                onEnter: ()=>{\n                    gsap.to(slides, {\n                        y: \"0rem\",\n                        opacity: 1,\n                        stagger: 0.1,\n                        duration: 0.5,\n                        ease: \"expo.out\"\n                    });\n                }\n            }\n        });\n        slides.forEach((slide)=>{\n            const video = slide.querySelector(\"video\");\n            video.pause();\n            video.currentTime = 0;\n            // let previewTimeout = null;\n            slide.addEventListener(\"mouseenter\", ()=>{\n                $6efbc8d1b8f19358$var$startPreview(video);\n            // previewTimeout = setTimeout(() => stopPreview(video), 4000);\n            });\n            slide.addEventListener(\"mouseleave\", ()=>{\n                // clearTimeout(previewTimeout);\n                // previewTimeout = null;\n                $6efbc8d1b8f19358$var$stopPreview(video);\n            });\n        });\n    });\n}\nfunction $6efbc8d1b8f19358$var$startPreview(video) {\n    video.muted = true;\n    video.currentTime = 1;\n    video.play();\n}\nfunction $6efbc8d1b8f19358$var$stopPreview(video) {\n    video.currentTime = 0;\n    video.pause();\n}\n\n\n\nvar $cljH0 = parcelRequire(\"cljH0\");\n\nvar $2rxJM = parcelRequire(\"2rxJM\");\nfunction $30e0a3439939b4cd$export$67e00ddefb174c98() {\n    const wrapper = document.querySelector(\".section.list-scroll\"), sections = wrapper.querySelectorAll(\".sticky-wrapper\"), numbers = wrapper.querySelector(\".scroll-list-numbers-inner\"), numbersLength = numbers ? numbers.querySelectorAll(\"div\").length : null;\n    if (!sections) return;\n    let currentIndex = 0;\n    function updateNumbers(i) {\n        if (currentIndex !== i) {\n            gsap.to(numbers, {\n                yPercent: Number((100 / numbersLength).toFixed(2)) * -i,\n                duration: 1,\n                ease: \"expo.out\"\n            });\n            currentIndex = i;\n        }\n    }\n    sections.forEach((section, i)=>{\n        const id = section.querySelector(\".section-anchor\").id;\n        const title = section.querySelector(\".section-scroll-title > *\"), descriptionEl = section.querySelector(\".section-scroll-description\"), descriptionType = descriptionEl.classList.contains(\"is-masked\") ? \"html\" : \"text\", anchorLink = wrapper.querySelector(`.section-nav-item[data-target=\"${id}\"]`);\n        let titleMaskEl, description;\n        if (title && descriptionType !== \"html\") titleMaskEl = (0, $cljH0.createSVGGrid)(title, 10);\n        if (descriptionType === \"html\") description = (0, $cljH0.createSVGGrid)(descriptionEl.querySelector(\"div\"), 10);\n        else {\n            descriptionInner = descriptionEl.querySelector(\"p\");\n            if (descriptionInner) {\n                const descriptionEls = new SplitType(descriptionInner, {\n                    types: \"lines\",\n                    tagName: \"span\"\n                });\n                (0, $2rxJM.setLinesWrapper)(descriptionEls.lines, ()=>{\n                    description = descriptionInner.querySelectorAll(\".line\");\n                });\n            }\n        }\n        $30e0a3439939b4cd$var$setListSectionScroll({\n            trigger: section,\n            isFirst: i === 0,\n            isLast: i === sections.length - 1,\n            titleMaskEl: titleMaskEl,\n            description: {\n                type: descriptionType,\n                el: description\n            },\n            anchorLink: anchorLink,\n            onComplete: ()=>{\n                if (numbers) updateNumbers(i);\n            }\n        });\n    });\n}\nfunction $30e0a3439939b4cd$var$setListSectionScroll(settings) {\n    const { trigger: trigger, isFirst: isFirst, isLast: isLast, titleMaskEl: titleMaskEl, description: description, anchorLink: anchorLink, onComplete: onComplete } = settings;\n    let squaresTitle, squaresDescription;\n    if (titleMaskEl) squaresTitle = titleMaskEl.querySelectorAll(\"rect\");\n    if (description.type === \"html\") squaresDescription = description.el.querySelectorAll(\"rect\");\n    if (!isFirst) {\n        if (titleMaskEl) gsap.set(squaresTitle, {\n            opacity: 0\n        });\n        if (description.type === \"html\") gsap.set(squaresDescription, {\n            opacity: 0\n        });\n        else gsap.set(description.el, {\n            yPercent: 100\n        });\n    } else {\n        if (titleMaskEl) gsap.set(squaresTitle, {\n            opacity: 1\n        });\n        if (description.type === \"html\") gsap.set(squaresDescription, {\n            opacity: 1\n        });\n    }\n    const tlIn = gsap.timeline({\n        paused: true\n    });\n    const tlOut = gsap.timeline({\n        paused: true\n    });\n    if (!isFirst) {\n        if (titleMaskEl) tlIn.to(squaresTitle, {\n            opacity: 1,\n            duration: 0.01,\n            stagger: {\n                from: \"random\",\n                each: 0.01\n            },\n            ease: \"bounce.out\"\n        }, 0);\n        if (description.type === \"html\") tlIn.to(squaresDescription, {\n            opacity: 1,\n            duration: 0.01,\n            stagger: {\n                from: \"random\",\n                each: 0.01\n            },\n            ease: \"bounce.out\"\n        }, 0);\n        if (description.type === \"text\" && description.el) tlIn.to(description.el, {\n            yPercent: 0,\n            stagger: 0.02,\n            duration: 0.5,\n            ease: \"power4.inOut\"\n        }, // `-=${squaresVideoTiming}`\n        0);\n    }\n    if (titleMaskEl) tlOut.to(squaresTitle, {\n        opacity: 0,\n        duration: 0.01,\n        stagger: {\n            from: \"random\",\n            each: 0.01\n        },\n        ease: \"bounce.out\"\n    });\n    if (description.type === \"html\") tlOut.to(squaresDescription, {\n        opacity: 0,\n        duration: 0.01,\n        stagger: {\n            from: \"random\",\n            each: 0.01\n        },\n        ease: \"bounce.out\"\n    });\n    if (description.type === \"text\" && description.el) tlOut.to(description.el, {\n        yPercent: -100,\n        stagger: 0.02,\n        duration: 0.5,\n        ease: \"power4.inOut\"\n    }, 0);\n    let start, end;\n    if (isFirst) {\n        start = \"top top\";\n        end = \"50% top\";\n    } else if (isLast) {\n        start = \"50% top\";\n        end = \"bottom bottom\";\n    } else {\n        start = \"33.33% top\";\n        end = \"66.66% top\";\n    }\n    gsap.timeline({\n        scrollTrigger: {\n            trigger: trigger,\n            start: start,\n            end: end,\n            // markers: true,\n            scrub: true,\n            pin: false,\n            onEnter: ()=>{\n                if (!isFirst) {\n                    tlIn.play();\n                    if (typeof onComplete === \"function\") onComplete();\n                }\n                if (anchorLink) anchorLink.classList.add(\"active\");\n            },\n            onEnterBack: ()=>{\n                tlOut.reverse();\n                onComplete();\n                if (anchorLink) anchorLink.classList.add(\"active\");\n            },\n            onLeave: ()=>{\n                if (!isLast) {\n                    tlOut.play();\n                    if (typeof onComplete === \"function\") onComplete();\n                }\n                if (anchorLink) anchorLink.classList.remove(\"active\");\n            },\n            onLeaveBack: ()=>{\n                if (!isFirst) {\n                    tlIn.reverse();\n                    if (typeof onComplete === \"function\") onComplete();\n                }\n                if (anchorLink) anchorLink.classList.remove(\"active\");\n            }\n        }\n    });\n}\n\n\ndocument.fonts.ready.then(()=>{\n    (0, $6efbc8d1b8f19358$export$ebbd8862ad385694)();\n    (0, $30e0a3439939b4cd$export$67e00ddefb174c98)();\n});\n\n})();\n//# sourceMappingURL=services.js.map\n","export function createSVGGrid(container, squaresPerRow, fill, onlyEmbed) {\n  if (!container) {\n    console.error(\"Container not found\");\n    return;\n  }\n\n  // Get the container's dimensions\n  const containerWidth = container.clientWidth;\n  const containerHeight = container.clientHeight;\n\n  const responsiveSquares = window.innerWidth <= 991 ? (squaresPerRow / 2) : squaresPerRow;\n\n  // Calculate the size of each square\n  const squareSize = parseInt(containerWidth / responsiveSquares);\n\n  // Calculate the number of squares per column\n  const squaresPerColumn = Math.ceil(containerHeight / squareSize);\n\n  // Create a unique ID for the mask\n  const maskId = \"mask-\" + Math.random().toString(36).substr(2, 9);\n\n  if (!onlyEmbed) {\n    // Create SVG content\n    let svgContent = `\n                <svg viewBox=\"0 0 ${containerWidth} ${containerHeight}\" xmlns=\"http://www.w3.org/2000/svg\" preserveAspectRatio=\"none\" style=\"position:absolute;top:0;left:0;width:100%;height:100%;pointer-events:none;\">\n                    <defs>\n                        <mask id=\"${maskId}\">\n                            ${Array.from({ length: squaresPerColumn })\n                              .map((_, row) =>\n                                Array.from({ length: responsiveSquares })\n                                  .map((_, col) => {\n                                    const x = col * squareSize;\n                                    const y = row * squareSize;\n                                    return `<rect x=\"${x}\" y=\"${y}\" width=\"${\n                                      squareSize + 1\n                                    }\" height=\"${squareSize + 1}\" fill=\"${\n                                      fill ? fill : \"#000000\"\n                                    }\"/>`;\n                                  })\n                                  .join(\"\")\n                              )\n                              .join(\"\")}\n                        </mask>\n                    </defs>\n                </svg>`;\n    // Create wrapper for the SVG and mask\n    const maskContainer = document.createElement(\"div\");\n    maskContainer.className = \"mask-container\";\n    maskContainer.style.maskImage = `url(#${maskId})`;\n\n    // Append SVG to maskContainer\n    maskContainer.innerHTML = svgContent;\n    container.parentNode.insertBefore(maskContainer, container);\n    maskContainer.appendChild(container);\n\n    return maskContainer.querySelector(\"svg\");\n  } else {\n    // Create SVG content\n    let svgContent = `\n                <svg viewBox=\"0 0 ${containerWidth} ${containerHeight}\" xmlns=\"http://www.w3.org/2000/svg\" preserveAspectRatio=\"none\" style=\"position:absolute;top:0;left:0;width:100%;height:100%;pointer-events:none;\">\n                            ${Array.from({ length: squaresPerColumn })\n                              .map((_, row) =>\n                                Array.from({ length: squaresPerRow })\n                                  .map((_, col) => {\n                                    const x = col * squareSize;\n                                    const y = row * squareSize;\n                                    return `<rect x=\"${x}\" y=\"${y}\" width=\"${\n                                      squareSize + 1\n                                    }\" height=\"${squareSize + 1}\" fill=\"${\n                                      fill ? fill : \"#000000\"\n                                    }\"/>`;\n                                  })\n                                  .join(\"\")\n                              )\n                              .join(\"\")}\n                </svg>`;\n    container.insertAdjacentHTML(\"beforeend\", svgContent);\n\n    return svgContent;\n  }\n}\n","export function setLinesWrapper(lines, callback) {\n  // Wrap each line in a .line-wrapper span\n  lines.forEach(line => {\n    const wrapper = document.createElement('span');\n    wrapper.classList.add('line-wrapper');\n    line.parentNode.insertBefore(wrapper, line);\n    wrapper.appendChild(line);\n  });\n\n  if (typeof callback === 'function') {\n    callback();\n  }\n}","import { initServicesSlider } from \"./services/slider\";\nimport { initServicesSectionScroll } from \"./services/services\";\n\ndocument.fonts.ready.then(() => {\n  initServicesSlider();\n  initServicesSectionScroll();\n});\n","export function initServicesSlider() {\n  if (!document.querySelector(\".news-slider\")) {\n    return;\n  }\n\n  const sliders = document.querySelectorAll(\".news-slider\");\n\n  sliders.forEach((s) => {\n    const slider = new Swiper(s, {\n      slidesPerView: \"auto\",\n      navigation: {\n        nextEl: \".slider-controls .button.next\",\n        prevEl: \".slider-controls .button.prev\",\n      },\n    });\n\n    // gsap logic\n    const slides = s.querySelectorAll(\".services-card\");\n    gsap.set(slides, {\n      y: \"3rem\",\n      opacity: 0,\n    });\n\n    gsap.timeline({\n      scrollTrigger: {\n        trigger: s,\n        start: \"25% bottom\",\n        onEnter: () => {\n          gsap.to(slides, {\n            y: \"0rem\",\n            opacity: 1,\n            stagger: 0.1,\n            duration: 0.5,\n            ease: \"expo.out\",\n          });\n        },\n      },\n    });\n\n    slides.forEach((slide) => {\n      const video = slide.querySelector(\"video\");\n      video.pause();\n      video.currentTime = 0;\n\n      // let previewTimeout = null;\n\n      slide.addEventListener(\"mouseenter\", () => {\n        startPreview(video);\n        // previewTimeout = setTimeout(() => stopPreview(video), 4000);\n      });\n\n      slide.addEventListener(\"mouseleave\", () => {\n        // clearTimeout(previewTimeout);\n        // previewTimeout = null;\n        stopPreview(video);\n      });\n    });\n  });\n}\n\nfunction startPreview(video) {\n  video.muted = true;\n  video.currentTime = 1;\n  video.play();\n}\n\nfunction stopPreview(video) {\n  video.currentTime = 0;\n  video.pause();\n}\n","import { createSVGGrid } from \"../modules/createSVGGrid\";\nimport { setLinesWrapper } from \"../modules/setLinesWrapper\";\n\nexport function initServicesSectionScroll() {\n  const wrapper = document.querySelector(\".section.list-scroll\"),\n    sections = wrapper.querySelectorAll(\".sticky-wrapper\"),\n    numbers = wrapper.querySelector(\".scroll-list-numbers-inner\"),\n    numbersLength = numbers ? numbers.querySelectorAll(\"div\").length : null;\n\n  if (!sections) {\n    return;\n  }\n\n  let currentIndex = 0;\n\n  function updateNumbers(i) {\n      if (currentIndex !== i) {\n        gsap.to(numbers, {\n          yPercent: Number((100 / numbersLength).toFixed(2)) * -i,\n          duration: 1,\n          ease: \"expo.out\",\n        });\n\n        currentIndex = i;\n      }\n  }\n\n  sections.forEach((section, i) => {\n    const id = section.querySelector('.section-anchor').id;\n    const title = section.querySelector(\".section-scroll-title > *\"),\n      descriptionEl = section.querySelector(\".section-scroll-description\"),\n      descriptionType = descriptionEl.classList.contains(\"is-masked\") ? 'html': 'text',\n      anchorLink = wrapper.querySelector(\n        `.section-nav-item[data-target=\"${id}\"]`\n      );\n\n    let titleMaskEl, description;\n\n    if (title && descriptionType !== 'html') {\n      titleMaskEl = createSVGGrid(title, 10);\n    }\n\n    if (descriptionType === 'html') {\n      description = createSVGGrid(descriptionEl.querySelector('div'), 10);\n    } else {\n      descriptionInner = descriptionEl.querySelector(\"p\");\n      if (descriptionInner) {\n        const descriptionEls = new SplitType(descriptionInner, {\n          types: \"lines\",\n          tagName: \"span\",\n        });\n\n        setLinesWrapper(descriptionEls.lines, () => {\n          description = descriptionInner.querySelectorAll(\".line\");\n        });\n      }\n    }\n\n    setListSectionScroll({\n      trigger: section,\n      isFirst: i === 0,\n      isLast: i === sections.length - 1,\n      titleMaskEl,\n      description: {\n        type: descriptionType,\n        el: description,\n      },\n      anchorLink,\n      onComplete: () => {\n        if (numbers) {\n          updateNumbers(i);\n        }\n      },\n    });\n  });\n}\n\nfunction setListSectionScroll(settings) {\n  const {\n    trigger,\n    isFirst,\n    isLast,\n    titleMaskEl,\n    description,\n    anchorLink,\n    onComplete,\n  } = settings;\n  \n  let squaresTitle, squaresDescription;\n\n  if (titleMaskEl) {\n    squaresTitle = titleMaskEl.querySelectorAll(\"rect\");\n  }\n  if (description.type === \"html\") {\n    squaresDescription = description.el.querySelectorAll(\"rect\");\n  }\n\n  if (!isFirst) {\n    if (titleMaskEl) {\n      gsap.set(squaresTitle, { opacity: 0 });\n    }\n\n    if (description.type === \"html\") {\n      gsap.set(squaresDescription, { opacity: 0 });\n    } else {\n      gsap.set(description.el, { yPercent: 100 });\n    }\n\n  } else {\n    if (titleMaskEl) {\n      gsap.set(squaresTitle, { opacity: 1 });\n    }\n    if (description.type === \"html\") {\n      gsap.set(squaresDescription, { opacity: 1 });\n    }\n  }\n  const tlIn = gsap.timeline({ paused: true });\n  const tlOut = gsap.timeline({ paused: true });\n\n  if (!isFirst) {\n    if (titleMaskEl) {\n      tlIn.to(\n        squaresTitle,\n        {\n          opacity: 1,\n          duration: 0.01,\n          stagger: {\n            from: \"random\",\n            each: 0.01,\n          },\n          ease: \"bounce.out\",\n        },\n        0\n      );\n    }\n\n    if (description.type === \"html\") {\n      tlIn.to(\n        squaresDescription,\n        {\n          opacity: 1,\n          duration: 0.01,\n          stagger: {\n            from: \"random\",\n            each: 0.01,\n          },\n          ease: \"bounce.out\",\n        },\n        0\n      );\n    }\n\n    if (description.type === \"text\" && description.el) {\n      tlIn.to(\n        description.el,\n        {\n          yPercent: 0,\n          stagger: 0.02,\n          duration: 0.5,\n          ease: \"power4.inOut\",\n        },\n        // `-=${squaresVideoTiming}`\n        0\n      );\n    }\n  }\n\n  if (titleMaskEl) {\n    tlOut.to(squaresTitle, {\n      opacity: 0,\n      duration: 0.01,\n      stagger: {\n        from: \"random\",\n        each: 0.01,\n      },\n      ease: \"bounce.out\",\n    });\n  }\n\n  if (description.type === \"html\") {\n    tlOut.to(squaresDescription, {\n      opacity: 0,\n      duration: 0.01,\n      stagger: {\n        from: \"random\",\n        each: 0.01,\n      },\n      ease: \"bounce.out\",\n    });\n  }\n\n  if (description.type === \"text\" && description.el) {\n    tlOut.to(\n      description.el,\n      {\n        yPercent: -100,\n        stagger: 0.02,\n        duration: 0.5,\n        ease: \"power4.inOut\",\n      },\n      0\n    );\n  }\n\n  let start, end;\n\n  if (isFirst) {\n    start = \"top top\";\n    end = \"50% top\";\n  } else if (isLast) {\n    start = \"50% top\";\n    end = \"bottom bottom\";\n  } else {\n    start = \"33.33% top\";\n    end = \"66.66% top\";\n  }\n\n  gsap.timeline({\n    scrollTrigger: {\n      trigger,\n      start,\n      end,\n      // markers: true,\n      scrub: true,\n      pin: false,\n      onEnter: () => {\n        if (!isFirst) {\n          tlIn.play();\n          if (typeof onComplete === 'function') {\n            onComplete();\n          }\n        }\n\n        if (anchorLink) {\n          anchorLink.classList.add(\"active\");\n        }\n      },\n      onEnterBack: () => {\n        tlOut.reverse();\n        onComplete();\n        if (anchorLink) {\n          anchorLink.classList.add(\"active\");\n        }\n      },\n      onLeave: () => {\n        if (!isLast) {\n          tlOut.play();\n          if (typeof onComplete === \"function\") {\n            onComplete();\n          }\n        }\n        if (anchorLink) {\n          anchorLink.classList.remove(\"active\");\n        }\n      },\n      onLeaveBack: () => {\n        if (!isFirst) {\n          tlIn.reverse();\n          if (typeof onComplete === \"function\") {\n            onComplete();\n          }\n        }\n        if (anchorLink) {\n          anchorLink.classList.remove(\"active\");\n        }\n      },\n    },\n  });\n}\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","$8fc6b8bbd146cdca$export$d47c320381fa2abf","container","squaresPerRow","fill","onlyEmbed","console","error","containerWidth","clientWidth","containerHeight","clientHeight","responsiveSquares","window","innerWidth","squareSize","parseInt","squaresPerColumn","Math","ceil","maskId","random","toString","substr","svgContent","Array","from","length","map","_","row","col","join","insertAdjacentHTML","maskContainer","document","createElement","className","style","maskImage","innerHTML","parentNode","insertBefore","appendChild","querySelector","$1c7845f0e1de0887$export$8f060496e19d4bbb","lines","callback","forEach","line","wrapper","classList","add","$cljH0","$2rxJM","fonts","ready","then","sliders","querySelectorAll","Swiper","slidesPerView","navigation","nextEl","prevEl","slides","gsap","y","opacity","timeline","scrollTrigger","trigger","start","onEnter","to","stagger","duration","ease","slide","video","pause","currentTime","addEventListener","muted","play","sections","numbers","numbersLength","currentIndex","section","i","titleMaskEl","description","title","descriptionEl","descriptionType","contains","anchorLink","createSVGGrid","descriptionInner","descriptionEls","SplitType","types","tagName","setLinesWrapper","$30e0a3439939b4cd$var$setListSectionScroll","settings","squaresTitle","squaresDescription","end","isFirst","isLast","onComplete","type","el","yPercent","tlIn","paused","tlOut","each","scrub","pin","onEnterBack","reverse","onLeave","remove","onLeaveBack","Number","toFixed"],"version":3,"file":"services.js.map"}