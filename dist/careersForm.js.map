{"mappings":"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","sources":["<anon>","src/modules/getHeight.js","src/careersForm.js"],"sourcesContent":["(() => {\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire5744\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire5744\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"kpGgi\", function(module, exports) {\n\n$parcel$export(module.exports, \"getElementHeightInRem\", () => $edc6ecc670d98733$export$d6278f2ff6cc02ee);\n/**\n * Converts a length value from any CSS unit to pixels.\n * @param {string} value - The length value as a string (e.g., \"2rem\", \"50px\").\n * @returns {number} - The length value in pixels.\n */ function $edc6ecc670d98733$var$convertToPixels(value) {\n    // Create a temporary element to use the browser's rendering to convert the value to pixels\n    const tempElement = document.createElement(\"div\");\n    tempElement.style.position = \"absolute\";\n    tempElement.style.visibility = \"hidden\";\n    tempElement.style.width = value;\n    document.body.appendChild(tempElement);\n    const pixelValue = parseFloat(window.getComputedStyle(tempElement).width);\n    document.body.removeChild(tempElement);\n    return pixelValue;\n}\nfunction $edc6ecc670d98733$export$d6278f2ff6cc02ee(element) {\n    if (!element) throw new Error(\"Element is required\");\n    // Get the computed style of the element\n    const computedStyle = window.getComputedStyle(element);\n    // Get the height of the element in pixels\n    const heightInPixels = parseFloat(computedStyle.height);\n    // Get the font size of the root element (html) in rem units and convert it to pixels\n    const rootFontSizeInRem = window.getComputedStyle(document.documentElement).fontSize;\n    const rootFontSizeInPixels = $edc6ecc670d98733$var$convertToPixels(rootFontSizeInRem);\n    // Calculate height in rem units\n    const heightInRem = heightInPixels / rootFontSizeInPixels;\n    return heightInRem;\n}\n\n});\n\n\nvar $kpGgi = parcelRequire(\"kpGgi\");\nfunction $a77297c040a7861d$var$initCareersForm() {\n    const formWrapper = document.querySelector(\".careers-form_wrapper\"), formScroll = document.querySelector(\".section.careers-content\");\n    if (!formWrapper || !formScroll) return;\n    const formCta = formWrapper.querySelector(\".careers-form_cta\"), formCtaHeight = (0, $kpGgi.getElementHeightInRem)(formCta), ctaTrigger = formCta.querySelector(\".button\"), form = formWrapper.querySelector(\".careers-form\"), formClose = formWrapper.querySelector(\".careers-form_close\"), formCloseCircles = formClose.querySelectorAll(\"circle\"), formInner = formWrapper.querySelector(\".careers-form_inner\"), backdrop = formWrapper.querySelector(\".careers-form_backdrop\");\n    gsap.set(formInner, {\n        height: `${formCtaHeight}rem`,\n        opacity: 0,\n        visibility: \"hidden\"\n    });\n    gsap.set(form, {\n        visibility: \"hidden\",\n        opacity: 0\n    });\n    gsap.set(backdrop, {\n        opacity: 0,\n        backdropFilter: \"blur(0px)\"\n    });\n    gsap.set(formClose, {\n        visibility: \"hidden\"\n    });\n    gsap.set(formCloseCircles, {\n        opacity: 0\n    });\n    let isFormActive = false;\n    const tl = gsap.timeline({\n        paused: true\n    });\n    tl.set(form, {\n        visibility: \"visible\"\n    }).to(formCta, {\n        opacity: 0,\n        duration: 0.5,\n        ease: \"expo.inOut\"\n    }, 0).to(backdrop, {\n        display: \"block\",\n        opacity: 1,\n        backdropFilter: \"blur(24px)\",\n        duration: 0.5,\n        ease: \"expo.inOut\"\n    }, 0).to(formInner, {\n        height: \"auto\",\n        duration: 0.5,\n        ease: \"expo.inOut\"\n    }, 0).to(form, {\n        opacity: 1,\n        duration: 0.5,\n        ease: \"expo.inOut\"\n    }, 0).set(formClose, {\n        visibility: \"visible\"\n    }).to(formCloseCircles, {\n        opacity: 1,\n        duration: 0.01,\n        stagger: {\n            each: 0.05,\n            from: \"random\"\n        },\n        ease: \"expo.inOut\"\n    }, 0.5).set(formCta, {\n        visibility: \"hidden\"\n    });\n    ctaTrigger.addEventListener(\"click\", ()=>{\n        tl.play();\n        isFormActive = true;\n    });\n    formClose.addEventListener(\"click\", ()=>{\n        tl.reverse();\n        isFormActive = false;\n    });\n    formClose.addEventListener(\"mouseover\", ()=>{\n        gsap.fromTo(formCloseCircles, {\n            opacity: 0\n        }, {\n            opacity: 1,\n            duration: 0.01,\n            stagger: {\n                each: 0.05,\n                from: \"random\"\n            },\n            ease: \"none\"\n        });\n    });\n    // ScrollTrigger to show / hide form\n    gsap.timeline({\n        scrollTrigger: {\n            trigger: formScroll,\n            start: \"top center\",\n            end: \"bottom center\",\n            scrub: true,\n            pin: false,\n            onEnter: ()=>{\n                gsap.to(formInner, {\n                    visibility: \"visible\",\n                    opacity: 1,\n                    duration: 0.5,\n                    ease: \"expo.inOut\"\n                });\n            },\n            onEnterBack: ()=>{\n                gsap.to(formInner, {\n                    visibility: \"visible\",\n                    opacity: 1,\n                    duration: 0.5,\n                    ease: \"expo.inOut\"\n                });\n            },\n            onLeave: ()=>{\n                if (isFormActive) tl.reverse();\n                gsap.to(formInner, {\n                    opacity: 0,\n                    duration: 0.5,\n                    ease: \"expo.inOut\",\n                    onComplete: ()=>{\n                        gsap.set(formInner, {\n                            visibility: \"hidden\"\n                        });\n                    }\n                });\n            },\n            onLeaveBack: ()=>{\n                if (isFormActive) tl.reverse();\n                gsap.to(formInner, {\n                    opacity: 0,\n                    duration: 0.5,\n                    ease: \"expo.inOut\",\n                    onComplete: ()=>{\n                        gsap.set(formInner, {\n                            visibility: \"hidden\"\n                        });\n                    }\n                });\n            }\n        }\n    });\n}\ndocument.fonts.ready.then(()=>{\n    $a77297c040a7861d$var$initCareersForm();\n});\n\n})();\n//# sourceMappingURL=careersForm.js.map\n","/**\n * Converts a length value from any CSS unit to pixels.\n * @param {string} value - The length value as a string (e.g., \"2rem\", \"50px\").\n * @returns {number} - The length value in pixels.\n */\nfunction convertToPixels(value) {\n  // Create a temporary element to use the browser's rendering to convert the value to pixels\n  const tempElement = document.createElement(\"div\");\n  tempElement.style.position = \"absolute\";\n  tempElement.style.visibility = \"hidden\";\n  tempElement.style.width = value;\n  document.body.appendChild(tempElement);\n  const pixelValue = parseFloat(window.getComputedStyle(tempElement).width);\n  document.body.removeChild(tempElement);\n  return pixelValue;\n}\n\n/**\n * Calculates the height of an element in rem units.\n * @param {HTMLElement} element - The target element.\n * @returns {number} - The height of the element in rem units.\n */\nexport function getElementHeightInRem(element) {\n  if (!element) {\n    throw new Error(\"Element is required\");\n  }\n\n  // Get the computed style of the element\n  const computedStyle = window.getComputedStyle(element);\n\n  // Get the height of the element in pixels\n  const heightInPixels = parseFloat(computedStyle.height);\n\n  // Get the font size of the root element (html) in rem units and convert it to pixels\n  const rootFontSizeInRem = window.getComputedStyle(\n    document.documentElement\n  ).fontSize;\n  const rootFontSizeInPixels = convertToPixels(rootFontSizeInRem);\n\n  // Calculate height in rem units\n  const heightInRem = heightInPixels / rootFontSizeInPixels;\n\n  return heightInRem;\n}\n","import { getElementHeightInRem } from \"./modules/getHeight\";\n\nfunction initCareersForm() {\n  const formWrapper = document.querySelector('.careers-form_wrapper'),\n    formScroll = document.querySelector('.section.careers-content');\n\n  if (!formWrapper || !formScroll) {\n    return;\n  }\n\n  const formCta = formWrapper.querySelector('.careers-form_cta'),\n    formCtaHeight = getElementHeightInRem(formCta),\n    ctaTrigger = formCta.querySelector('.button'),\n    form = formWrapper.querySelector('.careers-form'),\n    formClose = formWrapper.querySelector('.careers-form_close'),\n    formCloseCircles = formClose.querySelectorAll('circle'),\n    formInner = formWrapper.querySelector('.careers-form_inner'),\n    backdrop = formWrapper.querySelector('.careers-form_backdrop');\n  \n  gsap.set(formInner, { height: `${formCtaHeight}rem`, opacity: 0, visibility: \"hidden\" });\n  gsap.set(form, { visibility: \"hidden\", opacity: 0 });\n  gsap.set(backdrop, { opacity: 0, backdropFilter: \"blur(0px)\" });\n  gsap.set(formClose, { visibility: \"hidden\" });\n  gsap.set(formCloseCircles, { opacity: 0 });\n\n  let isFormActive = false;\n  \n  const tl = gsap.timeline({ paused: true });\n\n  tl.set(form, { visibility: \"visible\" })\n    .to(\n      formCta,\n      {\n        opacity: 0,\n        duration: 0.5,\n        ease: \"expo.inOut\",\n      },\n      0\n    )\n    .to(\n      backdrop,\n      {\n        display: \"block\",\n        opacity: 1,\n        backdropFilter: \"blur(24px)\",\n        duration: 0.5,\n        ease: \"expo.inOut\",\n      },\n      0\n    )\n    .to(\n      formInner,\n      {\n        height: \"auto\",\n        duration: 0.5,\n        ease: \"expo.inOut\",\n      },\n      0\n    )\n    .to(\n      form,\n      {\n        opacity: 1,\n        duration: 0.5,\n        ease: \"expo.inOut\",\n      },\n      0\n    )\n    .set(formClose, { visibility: \"visible\" })\n    .to(\n      formCloseCircles,\n      {\n        opacity: 1,\n        duration: 0.01,\n        stagger: {\n          each: 0.05,\n          from: \"random\",\n        },\n        ease: \"expo.inOut\",\n      },\n      0.5\n    )\n    .set(formCta, { visibility: \"hidden\" });\n  \n  ctaTrigger.addEventListener('click', () => {\n    tl.play();\n    isFormActive = true;\n  });\n\n  formClose.addEventListener('click', () => {\n    tl.reverse();\n    isFormActive = false;\n  });\n\n  formClose.addEventListener('mouseover', () => {\n    gsap.fromTo(\n      formCloseCircles,\n      {\n        opacity: 0,\n      },\n      {\n        opacity: 1,\n        duration: 0.01,\n        stagger: {\n          each: 0.05,\n          from: \"random\",\n        },\n        ease: \"none\",\n      }\n    );\n  });\n\n  // ScrollTrigger to show / hide form\n\n  gsap.timeline({\n    scrollTrigger: {\n      trigger: formScroll,\n      start: \"top center\",\n      end: \"bottom center\",\n      scrub: true,\n      pin: false,\n      onEnter: () => {\n        gsap.to(formInner, {\n          visibility: \"visible\",\n          opacity: 1,\n          duration: 0.5,\n          ease: \"expo.inOut\",\n        });\n      },\n      onEnterBack: () => {\n        gsap.to(formInner, {\n          visibility: \"visible\",\n          opacity: 1,\n          duration: 0.5,\n          ease: \"expo.inOut\",\n        });\n      },\n      onLeave: () => {\n        if (isFormActive) {\n          tl.reverse();\n        }\n        gsap.to(formInner, {\n          opacity: 0,\n          duration: 0.5,\n          ease: \"expo.inOut\",\n          onComplete: () => {\n            gsap.set(formInner, { visibility: \"hidden\" });\n          }\n        });\n      },\n      onLeaveBack: () => {\n        if (isFormActive) {\n          tl.reverse();\n        }\n        gsap.to(formInner, {\n          opacity: 0,\n          duration: 0.5,\n          ease: \"expo.inOut\",\n          onComplete: () => {\n            gsap.set(formInner, { visibility: \"hidden\" });\n          },\n        });\n      },\n    }\n  })\n}\n\ndocument.fonts.ready.then(() => {\n  initCareersForm();\n});\n"],"names":["$parcel$global","$parcel$modules","$parcel$inits","parcelRequire","$kpGgi","globalThis","id","exports","init","module","call","err","Error","code","register","parcelRegister","$edc6ecc670d98733$export$d6278f2ff6cc02ee","element","heightInPixels","parseFloat","computedStyle","window","getComputedStyle","height","$edc6ecc670d98733$var$convertToPixels","value","tempElement","document","createElement","style","position","visibility","width","body","appendChild","pixelValue","removeChild","documentElement","fontSize","Object","defineProperty","get","set","s","enumerable","configurable","fonts","ready","then","$a77297c040a7861d$var$initCareersForm","formWrapper","querySelector","formScroll","formCta","formCtaHeight","getElementHeightInRem","ctaTrigger","form","formClose","formCloseCircles","querySelectorAll","formInner","backdrop","gsap","opacity","backdropFilter","isFormActive","tl","timeline","paused","to","duration","ease","display","stagger","each","from","addEventListener","play","reverse","fromTo","scrollTrigger","trigger","start","end","scrub","pin","onEnter","onEnterBack","onLeave","onComplete","onLeaveBack"],"version":3,"file":"careersForm.js.map"}