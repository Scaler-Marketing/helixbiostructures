{"mappings":"I,E,E,E,E,E,E,C,E,E,C,E,O,E,C,E,Y,iB,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,A,C,E,E,Q,A,E,Q,S,C,C,C,ECAO,SAAS,EAAgB,CAAK,CAAE,CAAQ,EAE7C,EAAM,OAAO,CAAC,AAAA,IACZ,IAAM,EAAU,SAAS,aAAa,CAAC,QACvC,EAAQ,SAAS,CAAC,GAAG,CAAC,gBACtB,EAAK,UAAU,CAAC,YAAY,CAAC,EAAS,GACtC,EAAQ,WAAW,CAAC,EACtB,GAEwB,YAApB,OAAO,GACT,GAEJ,C,O,c,C,E,O,C,kB,C,I,I,E,I,K,E,W,C,E,a,C,C,E,G,E,E,SC0CA,SAAS,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MACxB,AArDF,WACE,IAAM,EAAQ,SAAS,gBAAgB,CAAC,qBAEnC,GAIL,EAAM,OAAO,CAAC,AAAC,IACb,IAAM,EAAS,EAAK,aAAa,CAAC,qBAChC,EAAO,EAAK,aAAa,CAAC,qBAE5B,KAAK,GAAG,CAAC,EAAQ,CAAE,MAAO,CAAE,GAE5B,IAAM,EAAQ,IAAI,UAAU,EAAM,CAChC,MAAO,QACP,QAAS,MACX,GACA,AAAA,CAAA,EAAA,EAAA,eAAc,AAAd,EAAgB,EAAM,KAAK,CAAE,KAC3B,KAAK,GAAG,CAAC,EAAM,KAAK,CAAE,CAAE,SAAU,GAAI,EACxC,GAEA,KAAK,QAAQ,CAAC,CACZ,cAAe,CACb,QAAS,EACT,MAAO,CAAA,EACP,MAAO,gBACP,KAAM,CAAA,EACN,QAAS,KACP,KAAK,MAAM,CACT,EACA,CAAE,MAAO,CAAE,EACX,CACE,MAAO,EACP,SAAU,GACV,KAAM,UACR,GAEF,KAAK,MAAM,CACT,EAAM,KAAK,CACX,CAAE,SAAU,GAAI,EAChB,CACE,SAAU,EACV,QAAS,IACT,KAAM,YACR,EAEJ,CACF,CACF,EACF,EACF,GAIA","sources":["<anon>","src/modules/setLinesWrapper.js","src/bulletLists.js"],"sourcesContent":["(() => {\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire5744\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire5744\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"2rxJM\", function(module, exports) {\n\n$parcel$export(module.exports, \"setLinesWrapper\", () => $1c7845f0e1de0887$export$8f060496e19d4bbb);\nfunction $1c7845f0e1de0887$export$8f060496e19d4bbb(lines, callback) {\n    // Wrap each line in a .line-wrapper span\n    lines.forEach((line)=>{\n        const wrapper = document.createElement(\"span\");\n        wrapper.classList.add(\"line-wrapper\");\n        line.parentNode.insertBefore(wrapper, line);\n        wrapper.appendChild(line);\n    });\n    if (typeof callback === \"function\") callback();\n}\n\n});\n\n\nvar $2rxJM = parcelRequire(\"2rxJM\");\nfunction $0005f8482c91c151$var$initBulletLists() {\n    const items = document.querySelectorAll(\".bullet-list_item\");\n    if (!items) return;\n    items.forEach((item)=>{\n        const bullet = item.querySelector(\".bullet-list_icon\"), text = item.querySelector(\".text-rich-text p\");\n        gsap.set(bullet, {\n            scale: 0\n        });\n        const lines = new SplitType(text, {\n            types: \"lines\",\n            tagName: \"span\"\n        });\n        (0, $2rxJM.setLinesWrapper)(lines.lines, ()=>{\n            gsap.set(lines.lines, {\n                yPercent: 100\n            });\n        });\n        gsap.timeline({\n            scrollTrigger: {\n                trigger: item,\n                scrub: true,\n                start: \"center bottom\",\n                once: true,\n                onEnter: ()=>{\n                    gsap.fromTo(bullet, {\n                        scale: 0\n                    }, {\n                        scale: 1,\n                        duration: 0.5,\n                        ease: \"expo.out\"\n                    });\n                    gsap.fromTo(lines.lines, {\n                        yPercent: 100\n                    }, {\n                        yPercent: 0,\n                        stagger: 0.05,\n                        ease: \"power4.out\"\n                    });\n                }\n            }\n        });\n    });\n}\ndocument.fonts.ready.then(()=>{\n    $0005f8482c91c151$var$initBulletLists();\n});\n\n})();\n//# sourceMappingURL=bulletLists.js.map\n","export function setLinesWrapper(lines, callback) {\n  // Wrap each line in a .line-wrapper span\n  lines.forEach(line => {\n    const wrapper = document.createElement('span');\n    wrapper.classList.add('line-wrapper');\n    line.parentNode.insertBefore(wrapper, line);\n    wrapper.appendChild(line);\n  });\n\n  if (typeof callback === 'function') {\n    callback();\n  }\n}","import { setLinesWrapper } from \"./modules/setLinesWrapper\";\n\nfunction initBulletLists() {\n  const items = document.querySelectorAll(\".bullet-list_item\");\n\n  if (!items) {\n    return;\n  }\n\n  items.forEach((item) => {\n    const bullet = item.querySelector(\".bullet-list_icon\"),\n      text = item.querySelector(\".text-rich-text p\");\n    \n    gsap.set(bullet, { scale: 0 });\n\n    const lines = new SplitType(text, {\n      types: \"lines\",\n      tagName: \"span\",\n    });\n    setLinesWrapper(lines.lines, () => {\n      gsap.set(lines.lines, { yPercent: 100 });\n    });\n\n    gsap.timeline({\n      scrollTrigger: {\n        trigger: item,\n        scrub: true,\n        start: \"center bottom\",\n        once: true,\n        onEnter: () => {\n          gsap.fromTo(\n            bullet,\n            { scale: 0 },\n            {\n              scale: 1,\n              duration: 0.5,\n              ease: \"expo.out\",\n            }\n          );\n          gsap.fromTo(\n            lines.lines,\n            { yPercent: 100 },\n            {\n              yPercent: 0,\n              stagger: 0.05,\n              ease: \"power4.out\",\n            }\n          );\n        },\n      },\n    });\n  });\n}\n\ndocument.fonts.ready.then(() => {\n  initBulletLists();\n});\n"],"names":["$parcel$global","$parcel$modules","$parcel$inits","parcelRequire","$2rxJM","globalThis","id","exports","init","module","call","err","Error","code","register","parcelRegister","$1c7845f0e1de0887$export$8f060496e19d4bbb","lines","callback","forEach","line","wrapper","document","createElement","classList","add","parentNode","insertBefore","appendChild","Object","defineProperty","get","set","s","enumerable","configurable","fonts","ready","then","$0005f8482c91c151$var$initBulletLists","items","querySelectorAll","item","bullet","querySelector","text","gsap","scale","SplitType","types","tagName","setLinesWrapper","yPercent","timeline","scrollTrigger","trigger","scrub","start","once","onEnter","fromTo","duration","ease","stagger"],"version":3,"file":"bulletLists.js.map"}